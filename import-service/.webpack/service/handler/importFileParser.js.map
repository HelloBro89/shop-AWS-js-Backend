{"version":3,"file":"handler/importFileParser.js","mappings":"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","sources":["webpack://import-service/webpack/bootstrap","webpack://import-service/webpack/runtime/compat get default export","webpack://import-service/webpack/runtime/define property getters","webpack://import-service/webpack/runtime/hasOwnProperty shorthand","webpack://import-service/webpack/runtime/make namespace object","webpack://import-service/external commonjs \"aws-sdk\"","webpack://import-service/external commonjs \"csv-parser\"","webpack://import-service/./handler/importFileParser.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"aws-sdk\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"csv-parser\");","'use strict';\r\nimport AWS from 'aws-sdk';\r\nimport * as csv from 'csv-parser';\r\n\r\nexport const importFileParser = async (event) => {\r\n    const s3 = new AWS.S3({region: 'eu-west-1'});\r\n    const sqs = new AWS.SQS();\r\n    \r\n    console.log(`CHEKC EVENT: ${JSON.stringify(event)}`);\r\n\r\n    try {\r\n\r\n        for (const record of event.Records) {\r\n            \r\n            const BUCKET = record.s3.bucket.name;\r\n            const key = record.s3.object.key;\r\n\r\n            const params = {\r\n                Bucket: BUCKET,\r\n                Key: key,\r\n            };\r\n\r\n            console.log(`CHECK PARAMS  ${params}`);\r\n\r\n            await new Promise((resolve, reject) => {\r\n\r\n                s3.getObject(params).createReadStream()\r\n                .pipe(csv())\r\n                .on('data', (data) => {\r\n                    console.log(`Data file:  ${JSON.stringify(data)}`);\r\n                    console.log(process.env.SQS_URL)\r\n                    sqs.sendMessage({\r\n                        QueueUrl: process.env.SQS_URL,\r\n                        MessageBody: JSON.stringify(data)\r\n                    }, () => {\r\n                        console.log(`SEND MESSAGE FOR: ${data}`) //  instead of a callback, you can listen to the response and the response has a send method\r\n                    });\r\n\r\n                })\r\n                .on('error', err => {\r\n                    reject(`Failed: ${err}`)\r\n                })\r\n                .on('end', async () => {\r\n\r\n                    console.log(`Copy from ${BUCKET}/${key}`);\r\n                    \r\n                    \r\n\r\n                    await s3.copyObject({\r\n                        Bucket: BUCKET,\r\n                        CopySource: `${BUCKET}/${key}`,\r\n                        Key: key.replace('uploaded', 'parser')\r\n                    }).promise();\r\n\r\n                    console.log(`Copied to file parser.`)\r\n\r\n                    await s3.deleteObject({\r\n                        Bucket: BUCKET,\r\n                        Key: key,\r\n                    }).promise();\r\n\r\n                    console.log('File deleted');\r\n                    resolve(`GOOD`);\r\n                });\r\n            })\r\n        }\r\n  } catch (error) {\r\n      console.log(error);\r\n      return {\r\n          statusCode: 500,\r\n          headers: {\r\n              'Access-Control-Allow-Origin': '*',\r\n              'Access-Control-Allow-Credentials': true,\r\n          },\r\n          body: null\r\n      }\r\n   }\r\n}"],"names":["AWS","csv","importFileParser","event","s3","S3","region","sqs","SQS","console","log","JSON","stringify","record","Records","BUCKET","bucket","name","key","object","params","Bucket","Key","Promise","resolve","reject","getObject","createReadStream","pipe","on","data","process","env","SQS_URL","sendMessage","QueueUrl","MessageBody","err","copyObject","CopySource","replace","promise","deleteObject","error","statusCode","headers","body"],"sourceRoot":""}