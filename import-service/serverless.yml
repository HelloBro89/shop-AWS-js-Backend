service: import-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true

plugins:
    - serverless-webpack
    - serverless-dotenv-plugin
    

frameworkVersion: '2'
useDotenv: true
configValidationMode: error


provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1
 

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:ListBucket"
      Resource: 
        - "arn:aws:s3:::uploaded-product"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::uploaded-product/*"
    - Effect: "Allow"
      Action:
        - "sqs:*"
      Resource:
        - Fn::GetAtt: [ SQSQueue, Arn ]
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource:
        Ref: SNSTopic
       
  environment:
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic

resources:
 Resources:
   SQSQueue:
     Type: AWS::SQS::Queue
     Properties:
       QueueName: catalogItemsQueue

   SNSTopic:
     Type: AWS::SNS::Topic
     Properties:
        TopicName: createProductTopic

   SNSSubscription:
     Type: AWS::SNS::Subscription
     Properties:
        Endpoint: valoshyny@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic


functions:
  importProductsFile:
    handler: handler/importProductsFile.importProductsFile
    events:
      - http:
          path: /import
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                name: true

  importFileParser:
    handler: handler/importFileParser.importFileParser
    events:
      - s3:
          bucket: uploaded-product
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true
          
  catalogBatchProcess:
    handler: handler/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
           batchSize: 5
           arn:
             Fn::GetAtt:
               - SQSQueue
               - Arn

  
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here




#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
