service: import-service

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true

plugins:
    - serverless-webpack
    # - serverless-dotenv-plugin
    

frameworkVersion: '2'
# useDotenv: true
configValidationMode: error

variablesResolutionMode: 20210326
provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-west-1
 
  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - "sqs:*"
    Resource:
      - Fn::GetAtt: [ SQSQueue, Arn ]
  - Effect: "Allow"
    Action:
      - "s3:ListBucket"
    Resource: 
      - "arn:aws:s3:::uploaded-product"
  - Effect: "Allow"
    Action:
      - "s3:*"
    Resource:
      - "arn:aws:s3:::uploaded-product/*"


  environment:
    SQS_URL:
      Ref: SQSQueue

resources:
 Resources:
   SQSQueue:
     Type: AWS::SQS::Queue
     Properties:
       QueueName: catalogItemsQueue
    
 Outputs:
   SQSQueueArn:
     Value:
       Fn::GetAtt: [SQSQueue, Arn]
   SQSQueue:
     Value:
       Ref: SQSQueue


functions:
  importProductsFile:
    handler: handler/importProductsFile.importProductsFile
    events:
      - http:
          path: /import
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                name: true
          authorizer:
            name: tokenAuthorizer
            # arn: '${cf:authorization-service-${self:provider.stage}.basicAuthorizerArn}'
            arn: arn:aws:lambda:eu-west-1:316882137799:function:authorization-service-dev-basicAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token

  importFileParser:
    handler: handler/importFileParser.importFileParser
    events:
      - s3:
          bucket: uploaded-product
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true
          
